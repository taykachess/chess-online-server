// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  // id             Int          @id @default(autoincrement())
  username       String       @id
  rating         Float        @default(2000)
  title          Title?
  roles          Role[]
  // participant         Player[]
  games          Game[]
  orginizer      Tournament[] @relation(name: "orginizer")
  participant    Tournament[]
  // AUTH
  email          String?
  hashedPassword String?
  yandex         String?      @unique
  lichess        String?      @unique
  // For Dev and seldom cases
  bot            Boolean?
}

enum Role {
  ADMIN
}

enum Title {
  GM
  IM
}

model Tournament {
  id           String           @id @default(cuid())
  name         String
  description  String
  format       TournamentFormat
  control      String
  startTime    DateTime
  playerLimit  Int              @default(0)
  currentRound Int              @default(0)
  participants User[]
  players      Json?
  matches      Json?
  status       TournamentStatus @default(registration)
  rounds       Int?
  playoffs     String?
  bestOf       Int?
  double       Boolean?
  organizer    User             @relation(fields: [organizerId], references: [username], name: "orginizer")
  organizerId  String
}

enum TournamentStatus {
  registration
  running
  finished
}

enum TournamentFormat {
  swiss
}

model Match {
  id         String    @unique
  player1    String?
  player2    String?
  rounds     Int
  // [int,int,int]
  result     Json?
  status     String    @default("created")
  armageddon Boolean   @default(false)
  games      Game[]
  type       MatchType @default(bestof)
  // [{time:1800000, control:"3+0"},...]
  stages     Json?

  // Use in tournaments only
  // round        Int?
  // match        Int?
  // win          Json?
  // loss         Json?
  // Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

enum MatchType {
  bestof
  time
}

model Game {
  id      String  @id @default(cuid())
  pgn     String
  players User[]
  white   Json
  black   Json
  Match   Match?  @relation(fields: [matchId], references: [id], onDelete: SetNull)
  matchId String?
  result  String
  time    Int[]
  control String
}

// model Chat {
//   id Int @id @default(autoincrement())
//   messages Message[]
//   type ChatType
// }

// enum ChatType {
//   public
//   private
// }

// model Message {
//   id        Int      @id @default(autoincrement())
//   from      User     @relation(fields: [fromId], references: [id])
//   to        User?    @relation(fields: [userId], references: [id])
//   fromId    Int
//   toId      Int
//   text      String
//   createdAt DateTime @default(now())
// }
