// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  username       String   @unique
  email          String   @unique
  hashedPassword String
  rating         Decimal  @default(2000)
  title          Title?
  roles          Role[]
  participant    Player[]
  games          Game[]
}

enum Title {
  GM
  IM
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model Tournament {
  id            String   @id @default(cuid())
  name          String
  description   String
  format        String
  control       String
  sorting       String   @default("none")
  consolation   Boolean  @default(false)
  playerLimit   Int      @default(0)
  pointsForWin  Decimal  @default(1)
  pointsForDraw Decimal  @default(0.5)
  pointsForBye  Decimal  @default(1)
  currentRound  Int      @default(0)
  startTime     DateTime
  players       Player[]
  matches       Match[]
  status        String   @default("registration")
  rounds        Int?
  playoffs      String?
  bestOf        Int?
  cut           Json?
  tiebreakers   String[]
  double        Boolean?
}

model Player {
  id           String     @id @default(cuid())
  Tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentId String
  seed         Int        @default(0)
  initialByes  Int        @default(0)
  User         User       @relation(fields: [alies], references: [username])
  alies        String
  pairingBye   Boolean    @default(false)
  // matchesWhite Match[]    @relation(name: "w")
  // matchesBlack Match[]    @relation(name: "b")
  pairUpDown   Boolean    @default(false)
  matchCount   Int        @default(0)
  matchPoints  Int        @default(0)
  gameCount    Int        @default(0)
  gamePoints   Int        @default(0)
  bsn          Int        @default(0)
  active       Boolean    @default(true)
  results      Json[]
  tiebreakers  Json
}

// player1: string;
//   player2: string;
//   rounds: number;
//   games: MatchGame[];
//   armageddon: boolean;
//   result: [number, number, number];
//   active: Boolean;
//   tournamentId String

//  round: Number,
//     match: Number,
//     player1: String | Number | null,
//     player2: String | Number | null,
//     // the following objects are only present in elimination pairings
//     win?: {
//         round: Number,
//         match: Number
//     },
//     loss?: {
//         round: Number,
//         match: Number
//     }
model Match {
  id         String  @unique
  player1    String?
  player2    String?
  rounds     Int
  result     Json?
  status     String  @default("created")
  armageddon Boolean @default(false)
  games      Game[]

  // Use in tournaments only
  round        Int?
  match        Int?
  win          Json?
  loss         Json?
  Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId String?
}

model Game {
  id      String  @id @default(cuid())
  pgn     String
  players User[]
  white   Json
  black   Json
  Match   Match?  @relation(fields: [matchId], references: [id], onDelete: SetNull)
  matchId String?
  result  String
  time    Int[]
  control String
}
